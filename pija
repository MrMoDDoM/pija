#!/usr/bin/env python2

import os
import os.path
import argparse
import time
import sys
from termcolor import colored

#from analizer import analize

from analizer import *


html_start="<html><body><h1>Pija result</h1><br><br>"
html_end="</body></html>"
html_img_start="<img src=\""
html_img_end="\" height=\"500\" width=\"500\" />"

parser = argparse.ArgumentParser(description='Analize media files for detecting pornography.')

parser.add_argument('files', metavar='file', type=str, nargs='+',
                    help='File to analize.')

parser.add_argument('-sp', metavar='perc.', default='15', type=int,
                    help='The percentage of skin to determinate a positive.')

parser.add_argument('-op', action='store_const', const=True, default=False,
                    help='Show only positive file')

parser.add_argument('-F', action='store_const', const=True, default=False,
                    help='Write output to file.')

parser.add_argument('-R', action='store_const', const=True, default=False,
                    help='Analize recursively.')

parser.add_argument('-L', action='store_const', const=True, default=False,
                    help='Follow symbolic links.')

parser.add_argument('-c', metavar='folder', action='store',
                    help='Folder where will be copied positive file')

args = parser.parse_args()

def analize(path, min_skin_percentage):
    """Analizes a file, returning True if it contains pornography."""

    global MIN_SKIN_PERCENTAGE
    MIN_SKIN_PERCENTAGE = min_skin_percentage / 100

    global SKIN_PERCENTAGE

    try:
        type_ = magic.from_file(path)
    except IOError:
        return returnFalse(0)
    except UnicodeDecodeError:
        printError(path+" will be ignored (UnicodeDecodeError)")
        type_ = None

    if type_ is None:
        return returnFalse(0)

    #type_ = type_.lower()

    if "video" in type_:
        return analize_video(path)

    if "image" in type_:
        return analize_image(path)

    if "MPEG" in type_:
        return analize_video(path)

    return returnFalse(0)

#With this function, we can count file that will be analized
#Is a good practice to determinate how much work we have to do...
def count_file(file_, L):
    """Count all the file that will be analized, returning a list of path"""

    count = []
    for (dirpath, _, filenames) in os.walk(file_, True, None, L):
            for name in filenames:
                path = dirpath + '/' + name
                try:
                    type_ = magic.from_file(path)
                except IOError:
                    printError("ERROR COUNTING FILE - PROGRESS BAR MAY BE WRONG!")
                    return count
                except UnicodeDecodeError:
                    printError(path + " will be ignored! ( UnicodeDecodeError )")
                    continue

                if "MPEG" in type_:
                    count.append(path)

                if "image" in type_:
                    count.append(path)

                if "video" in type_:
                    count.append(path)



    return count

#Function to print a useful progress bar
def update_progress(progress):
    """Drive a progress bar"""

    barLength = 20 # Modify this to change the length of the progress bar
    status = ""
    if isinstance(progress, int):
        progress = float(progress)
    if not isinstance(progress, float):
        status = "error: progress var must be float\r\n"
    if progress < 0:
        status = "Halt...\n"
    if progress >= 1:
        progress = 1
        status = "Done...\n"
    block = int(round(barLength*progress))
    text = colored("\rProgress: [{0}] {1}% {2}".format( "#"*block + "-"*(barLength-block), progress*100, status), 'yellow')
    sys.stdout.write(text)
    sys.stdout.flush()

#Print HTML formatted result to a file
def printHTML(result):
    """Print HTML formated result to a file"""
    try:
        #out_file = open("Pija Result "+ time.strftime("%c")+".html","w")
        out_file = open("Pija_Result.html","w")
    except IOError:
        print "Error writing HTML output file! Do we have the rigth permissions?"

    printInfo("Result writed to "+out_file.name)

    out_file.write(html_start)
    for result_list in result:
        if result_list[1]:
            out_file.write("<hr><br>"+result_list[0]+"<br>")
            out_file.write(html_img_start)
            out_file.write(result_list[0])
            out_file.write(html_img_end)

    out_file.write(html_end)
    out_file.close()

def printTerminal(results):
    printInfo("Display results in 5 seconds...")
    time.sleep(5)
    print "\n"
    for result_list in results:
        if result_list[1]:
            print result_list[0] + ": " + colored(';D', 'green', attrs=['bold'])
        else:
            print result_list[0] + ": " + colored(':(', 'red')

    print "\n"


def printInfo(str_out):
    print colored('[INFO] ' + str_out, 'green')

def printError(str_out):
    print colored('[ERROR] ' + str_out, 'red', attrs=['bold'])

#Function to decide where and how print the result
def print_result(results):
    if args.F:
        printHTML(results)
    else:
        printTerminal(results)

printInfo("Skin percentage set to: " + str(args.sp) + "%")

for file_ in args.files:
    results = []

    file_ = os.path.expanduser(file_)

    if not os.path.exists(file_):
        print file_ + " doesn't exist."
        continue

    if not os.access(file_, os.R_OK):
        print file_ + " can't be read."
        continue

    if os.path.isdir(file_) and not args.R:
        print file_ + " is a folder, see -R option."
        continue

    try: 
        analized = 0.0
        if os.path.isdir(file_):
            printInfo("Counting file, please wait...")
            to_analize = count_file(file_, args.L) #We store all the file's path to analize
            printInfo(str(len(to_analize)) + " will be analized...")

            for path in to_analize:    
                analize_result = analize(path,args.sp) #We analize the path
                results.append([path, analize_result[0], analize_result[1]]) #Append the result
                analized = analized + 1 #Increment the counter
                update_progress(analized/len(to_analize)) #Update the progress bar

            print_result(results) #Only when all the path are analize, we print the result
        else:
            print analize_video(file_)
            analize_result = analize(file_,args.sp)
            print_result([[file_, analize_result[0], analize_result[1]]]) #this is a list of list - we are using this hack to maitain compatibility with the folder cases
    except KeyboardInterrupt: #Catchs interrupt signal and prints the result
        print "\n\n"
        printError("Ctlr+C pressed.. Printing result and exit!") 
        print_result(results)
