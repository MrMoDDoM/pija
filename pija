#!/usr/bin/env python2

import os
import os.path
import argparse
import time
from termcolor import colored

#from analizer import analize

from analizer import *

parser = argparse.ArgumentParser(description='Analize media files for detecting pornography.')

parser.add_argument('files', metavar='file', type=str, nargs='+',
                    help='File to analize.')

parser.add_argument('-sp', metavar='perc.', default='15', type=int,
                    help='The percentage of skin to determinate a positive.')

parser.add_argument('-op', action='store_const', const=True, default=False,
                    help='Show only positive file')

parser.add_argument('-F', action='store_const', const=True, default=False,
                    help='Write output to file.')

parser.add_argument('-R', action='store_const', const=True, default=False,
                    help='Analize recursively.')

parser.add_argument('-L', action='store_const', const=True, default=False,
                    help='Follow symbolic links.')

parser.add_argument('-c', metavar='folder', action='store',
                    help='Folder where will be copied positive file')

args = parser.parse_args()

def printInfo(str_out):
    print colored('[INFO] ' + str_out, 'green')

def print_result(path, result):
    if result['result']:
        if args.F:
            out_file.write(path+'\n')
        else:
            print path + ": " + colored(str(int(result['percentage']*100)) + '% --> ;D', 'green', attrs=['bold']) #+ colored(result[1], 'yellow')
    elif not args.op:
        print path + ": " + colored(str(int(result['percentage']*100)) + '% --> :(', 'red')

if args.F:
    try:
        out_file = open("Pija Result "+ time.strftime("%c")+".txt","w")
    except IOError:
        print "Error writin output file! Abort!"
        exit()

printInfo("Skin percentage set to: " + str(args.sp) + "%")

for file_ in args.files:

    file_ = os.path.expanduser(file_)

    if not os.path.exists(file_):
        print file_ + " doesn't exist."
        continue

    if not os.access(file_, os.R_OK):
        print file_ + " can't be read."
        contin  
    if os.path.isdir(file_) and not args.R:
        print file_ + " is a folder, see -R option."
        continue

    if os.path.isdir(file_):
        for (dirpath, _, filenames) in os.walk(file_, True, None, args.L):
            for name in filenames:
                path = dirpath + '/' + name
                print_result(path, analize(path, args.sp))
    else:
        print_result(file_, analize(file_, args.sp))

if args.F:
    out_file.close()

